/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.59
 * Generated at: 2021-02-26 08:28:08 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.visual;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("#tabs {\r\n");
      out.write("\toverflow:hidden; width: 100%;\r\n");
      out.write("\tmargin:0; padding:0; list-style:none; border-bottom:2px solid #3367d6;  \r\n");
      out.write("}\r\n");
      out.write("#tabs li {\r\n");
      out.write("\tfloat:left; width:100px;\r\n");
      out.write("\tmargin:0 -1px 0 0;\r\n");
      out.write("\tline-height:40px; color:#3367d6; background-color: #fff;\r\n");
      out.write("\tborder: 1px solid #3367d6; border-bottom:none;  cursor:pointer;\r\n");
      out.write("}\r\n");
      out.write("#tabs li.active {\r\n");
      out.write("\tcolor:#fff; background-color:#3367d6;\r\n");
      out.write("\tborder:1px solid #3367d6; border-bottom:none;\r\n");
      out.write("\t\r\n");
      out.write("}\r\n");
      out.write("#tabContent {  height:480px; margin:20px 0; }\r\n");
      out.write("#tabContent > div { display:none; }\r\n");
      out.write("#tabContent > div.active { display:block; }\r\n");
      out.write("\r\n");
      out.write(".c3-axis, .c3-chart { font-size:16px; font-weight:bold; }\r\n");
      out.write("\r\n");
      out.write(".legend ul { display:inline-block; }\r\n");
      out.write(".legend ul li { display:block; float:left; height:20px; }\r\n");
      out.write(".legend ul li * { vertical-align:middle; }\r\n");
      out.write(".legend .legend-item{ width:15px; height:15px; display:inline-block; \r\n");
      out.write(" margin:2px 2px 0; }\r\n");
      out.write(".legend ul li:not(:first-child) { margin-left:30px; }\r\n");
      out.write("\r\n");
      out.write(".loading { display:none; position:absolute; \r\n");
      out.write("\tleft:50%; top:50%; transform:translate(-50%, -50%); }\r\n");
      out.write(".chart { height:400px; }\t\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/c3/0.7.20/c3.min.css\" />\r\n");
      out.write("<script type=\"text/javascript\" \r\n");
      out.write("src=\"https://cdnjs.cloudflare.com/ajax/libs/c3/0.7.20/c3.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/5.16.0/d3.min.js\"></script>  \r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("$(function(){\r\n");
      out.write("\t$('#tabs li:eq(1)').trigger('click');\r\n");
      out.write("});\r\n");
      out.write("$(document).on('click', '#tabs li', function(){\r\n");
      out.write("\t$('#tabs li').removeClass();\r\n");
      out.write("\t$(this).addClass('active');\r\n");
      out.write("\r\n");
      out.write("\tvar idx = $('#tabs li.active').index();\r\n");
      out.write("\t$('#tabContent > div').removeClass();\r\n");
      out.write("\t$('#tabContent > div:eq('+ idx +')').addClass('active');\r\n");
      out.write("\r\n");
      out.write("\tif( idx==0 )  department_graph( $('[name=graph]').val() );\r\n");
      out.write("\telse if( idx==1 ) hirement_graph( $('[name=unit]').val() );\r\n");
      out.write("\t\r\n");
      out.write("}).on('change', '[name=unit], #top3', function(){\r\n");
      out.write("\tif( $('#top3').prop('checked') )\r\n");
      out.write("\t\thirement_graph_top3( $('[name=unit]:checked').val() );\r\n");
      out.write("\telse hirement_graph( $('[name=unit]:checked').val() );\r\n");
      out.write("\t\r\n");
      out.write("}).on('change', '[name=graph]', function(){\r\n");
      out.write("\tdepartment_graph( $(this).val() );\r\n");
      out.write("\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("function hirement_graph_top3(unit){\r\n");
      out.write("\t$('.chart').html('');\r\n");
      out.write("\tdisplay_status('block', unit);\r\n");
      out.write("\t\r\n");
      out.write("\t$.ajax({\r\n");
      out.write("\t\turl: 'visual/top3/' + unit,\r\n");
      out.write("\t\tsuccess: function( response ){\r\n");
      out.write("\t\t\tdisplay_status('none', unit);\r\n");
      out.write("\t\t\tconsole.log( response )\r\n");
      out.write("\t\t\tvar info = [];\r\n");
      out.write("\t\t\tif( unit=='year' ){\r\n");
      out.write("\t\t\t\tinfo.push( new Array('부서명', '2001년', '2002년', '2003년'\r\n");
      out.write("\t\t\t\t\t\t\t\t, '2004년', '2005년', '2006년', '2007년', '2008년' ) );\r\n");
      out.write("\t\t\t\t$(response).each(function(){\r\n");
      out.write("\t\t\t\t\tinfo.push( new Array( this.department_name, this.y2001\r\n");
      out.write("\t\t\t\t\t\t\t, this.y2002, this.y2003, this.y2004, this.y2005\r\n");
      out.write("\t\t\t\t\t\t\t, this.y2006, this.y2007, this.y2008 ) );\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}else{\r\n");
      out.write("\t\t\t\tinfo.push( new Array('부서명', '01월', '02월', '03월', '04월', '05월'\r\n");
      out.write("\t\t\t\t\t\t, '06월', '07월', '08월', '09월', '10월', '11월', '12월' ) );\r\n");
      out.write("\t\t\t\t$(response).each(function(){\r\n");
      out.write("\t\t\t\t\tinfo.push( new Array( this.department_name\r\n");
      out.write("\t\t\t\t\t, this.m01, this.m02, this.m03, this.m04, this.m05, this.m06\r\n");
      out.write("\t\t\t\t\t, this.m07, this.m08, this.m09, this.m10, this.m11, this.m12 ) );\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\tconsole.log( info )\r\n");
      out.write("\t\t\tmake_chart_top3( unit, info );\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t},error: function(req, text){\r\n");
      out.write("\t\t\tdisplay_status('none', unit);\r\n");
      out.write("\t\t\talert(text+':'+req.status);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function make_chart_top3( unit, datas ){\r\n");
      out.write("\tvar chart = c3.generate({\r\n");
      out.write("\t\tbindto: '.hirement .chart',\r\n");
      out.write("\t\tdata : { columns: datas, type: unit=='year' ? 'bar' : 'line'\r\n");
      out.write("\t\t\t\t , labels: true, x: '부서명' },\r\n");
      out.write("\t\taxis: { x: { type:'category' }\r\n");
      out.write("\t\t\t  , y: { label:{ position:'outer-top', text: 'TOP3 부서별 채용인원수' } } },\r\n");
      out.write("\t\tsize: { width:1200, height:400 },\r\n");
      out.write("\t\tbar: { width:25 },\r\n");
      out.write("\t\tgrid: { y: {show:true} },\r\n");
      out.write("\t\tlegend: {\r\n");
      out.write("\t\t\titem: { tile: { width:15, height:15 } }, padding: 40\r\n");
      out.write("\t\t}, \r\n");
      out.write("\t\tpadding: { bottom:20 }\r\n");
      out.write("\t});\r\n");
      out.write("\t$('.c3-legend-item').css('font-size', '16px');\r\n");
      out.write("\t$('.c3-line').css('stroke-width', '3px');\r\n");
      out.write("}\r\n");
      out.write("function display_status(status, graph){\r\n");
      out.write("\t$('.loading').css('display', status);\r\n");
      out.write("\t$('.legend').css('display', 'none');\r\n");
      out.write("}\r\n");
      out.write("//부서별 인원수\r\n");
      out.write("function department_graph(graph){\r\n");
      out.write("\t$('.chart').html('');\r\n");
      out.write("\tdisplay_status('block', graph);\r\n");
      out.write("\t$.ajax({\r\n");
      out.write("\t\turl: 'visual/department',\r\n");
      out.write("\t\tsuccess: function( response ){\r\n");
      out.write("\t\t\tdisplay_status('none', graph);\r\n");
      out.write("\t\t\tconsole.log( response )\r\n");
      out.write("\t\t\tvar cnt = [ '부서원수' ], name = [ '부서명' ];\r\n");
      out.write("\t\t\tvar info = [];\r\n");
      out.write("\t\t\t$(response).each(function(){\r\n");
      out.write("\t\t\t\tif( graph=='bar' ){\r\n");
      out.write("\t\t\t\t\t//선/막대그래프\r\n");
      out.write("\t\t\t\t\tcnt.push( this.count );\r\n");
      out.write("\t\t\t\t\tname.push( this.department_name );\r\n");
      out.write("\t\t\t\t}else {\r\n");
      out.write("\t\t\t\t\t//파이/도넛그래프\r\n");
      out.write("\t\t\t\t\tinfo.push( new Array(this.department_name, this.count) );\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\tif( graph=='bar' ){\r\n");
      out.write("\t\t\t\tmake_chart( graph, [ name, cnt ]);  //기본:선/막대\r\n");
      out.write("\t\t\t}else{\r\n");
      out.write("\t\t\t\tmake_chart( graph, info ); // 파이/도넛\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t},error: function(req, text){\r\n");
      out.write("\t\t\tdisplay_status('none', graph);\r\n");
      out.write("\t\t\talert(text+':'+req.status);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("}\r\n");
      out.write("//년도별 채용인원수\r\n");
      out.write("function hirement_graph( unit ){\r\n");
      out.write("\t$('.chart').html('');\r\n");
      out.write("\tdisplay_status('block', unit);\r\n");
      out.write("\r\n");
      out.write("\t$.ajax({\r\n");
      out.write("\t\turl: 'visual/' + unit,\r\n");
      out.write("\t\tsuccess: function( response ){\r\n");
      out.write("\t\t\tdisplay_status('none', unit);\r\n");
      out.write("\t\t\tconsole.log(response);\r\n");
      out.write("\t\t\tvar name = [ unit ], count = [ '채용인원수' ];\r\n");
      out.write("\t\t\t$(response).each(function(){\r\n");
      out.write("\t\t\t\tname.push( this.unit );\r\n");
      out.write("\t\t\t\tcount.push( this.count );\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\tmake_chart_bar( unit, [name, count] );\r\n");
      out.write("\r\n");
      out.write("// \t\t\t[  ['year', '2001년', '2001년', '2003년'], \r\n");
      out.write("// \t\t\t   [ '채용인원수', 10,5,7 ] \r\n");
      out.write("// \t\t\t]\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t},error: function(req, text){\r\n");
      out.write("\t\t\tdisplay_status('none', graph);\r\n");
      out.write("\t\t\talert(text+':'+req.status);\r\n");
      out.write("\t\t}\t\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function make_chart_bar(unit, datas){\r\n");
      out.write("\tvar chart = c3.generate({\r\n");
      out.write("\t\tbindto: '.hirement .chart',\r\n");
      out.write("\t\tdata: { columns: datas, type: 'bar', x: unit, labels: true\r\n");
      out.write("\t\t\t\t, color: function(color, data){ \r\n");
      out.write("\t\t\t\t\t\treturn colors[ setColor(data.value) ] \r\n");
      out.write("\t\t\t\t  }\r\n");
      out.write("\t\t\t  },\r\n");
      out.write("\t\taxis: { x: { type :'category' }\r\n");
      out.write("\t\t\t\t, y: { label: { position:'outer-top', text: datas[1][0] } }\r\n");
      out.write("\t\t\t  },\r\n");
      out.write("\t\tsize: { width:1000, height:400 },\r\n");
      out.write("\t\tbar: { width:30 },\r\n");
      out.write("\t\tgrid: { y: { show:true } },\r\n");
      out.write("\t\tlegend: { hide:true },\r\n");
      out.write("\t});\r\n");
      out.write("\t$('.hirement .legend-item').each(function(idx){\r\n");
      out.write("\t\t$(this).css('background-color', colors[idx]);\r\n");
      out.write("\t});\r\n");
      out.write("\t$('.hirement .legend').css('display', 'block');\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function basis_type(datas){ //선그래프\r\n");
      out.write("\tvar chart = c3.generate({\r\n");
      out.write("\t\tbindto: '.department .chart',\r\n");
      out.write("\t\tdata: { columns: datas\r\n");
      out.write("\t\t\t    , x: '부서명'  \r\n");
      out.write("\t\t\t  },\r\n");
      out.write("\t\taxis: { x:{ type:'category' } },\r\n");
      out.write("\t\tsize : { height:400, width:1000 },\r\n");
      out.write("\t\t\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("function make_chart(graph, datas){\r\n");
      out.write("\t//1. 선그래프(기본)\r\n");
      out.write("\t//basis_type(datas);\r\n");
      out.write("\r\n");
      out.write("\t//2. 파이그래프\r\n");
      out.write("\t//pie_type(datas);\r\n");
      out.write("\r\n");
      out.write("\tif( graph=='donut' )\r\n");
      out.write("\t\t//3. 도넛그래프\r\n");
      out.write("\t\tdonut_type(datas);\r\n");
      out.write("\telse\r\n");
      out.write("\t\t//4. 막대그래프\r\n");
      out.write("\t\tbar_type(datas);\r\n");
      out.write("}\r\n");
      out.write("var colors = [ '#fc6500', '#020299', '#0b6e1b', '#dbfc00', '#3d0047', '#fc0000',\r\n");
      out.write("\t\t\t   '#542c02', '#4b5903', '#72ed78', '#2f9cd6', '#d13b3b', '#8a60bd'];\r\n");
      out.write("\r\n");
      out.write("function setColor(num){\r\n");
      out.write("\tif( num<=10 ) return 0;\r\n");
      out.write("\telse if( num<=20 ) return 1;\r\n");
      out.write("\telse if( num<=30 ) return 2;\r\n");
      out.write("\telse if( num<=40 ) return 3;\r\n");
      out.write("\telse if( num<=50 ) return 4;\r\n");
      out.write("\telse               return 5;\r\n");
      out.write("}\r\n");
      out.write("function bar_type(datas){\r\n");
      out.write("\tvar chart = c3.generate({\r\n");
      out.write("\t\tbindto : '.department .chart',\r\n");
      out.write("\t\tdata: { columns: datas, x:'부서명', type:'bar', labels:true,\r\n");
      out.write("\t\t\t    //color:function(color, data){ return colors[ data.index ] } \r\n");
      out.write("\t\t\t    color:function(color, data){ return colors[ setColor(data.value) ] } \r\n");
      out.write("    \t},\r\n");
      out.write("\t\taxis: { x:{ type:'category', tick: { rotate:60 } }\r\n");
      out.write("\t\t\t   ,y:{ label:{ text:'부서원수', position:'outer-middle' } } },\r\n");
      out.write("\t\tlegend: { hide:true },\r\n");
      out.write("\t\tsize: { width:1000, height:400 },\r\n");
      out.write("\t\tbar: { width:30 },\r\n");
      out.write("\t\tgrid: { y: { show:true } }\r\n");
      out.write("\t});\t\r\n");
      out.write("\t$('.department .legend-item').each(function(idx){\r\n");
      out.write("\t\t$(this).css('background-color', colors[idx]);\r\n");
      out.write("\t});\r\n");
      out.write("\t$('.department .legend').css('display', 'block');\r\n");
      out.write("}\r\n");
      out.write("function donut_type(datas){\r\n");
      out.write("\tvar chart = c3.generate({\r\n");
      out.write("\t\tbindto : '.department .chart',\r\n");
      out.write("\t\tdata: { columns: datas, type: 'donut' },\r\n");
      out.write("\t\tsize: { width:1000, height:400 },\r\n");
      out.write("\t\tdonut: {\r\n");
      out.write("\t\t\twidth: 90,\r\n");
      out.write("\t\t\ttitle: '부서별 사원수',\r\n");
      out.write("\t\t\tlabel: {\r\n");
      out.write("\t\t\t\tformat: function(value, ratio, id){\r\n");
      out.write("\t\t\t\t\treturn (ratio*100).toFixed(1) + '%(' + value + '명)';\r\n");
      out.write("\t\t\t\t} \r\n");
      out.write("\t\t\t}\t\t\t\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("function pie_type(datas){\r\n");
      out.write("\tvar chart = c3.generate({\r\n");
      out.write("\t\tbindto : '.department .chart',\r\n");
      out.write("\t\tdata: { columns: datas, type: 'pie' },\r\n");
      out.write("\t\tsize: { width:1000, height:400 },\r\n");
      out.write("\t\tpie : {\r\n");
      out.write("\t\t\tlabel: {\r\n");
      out.write("\t\t\t\tformat: function(value, ratio, id){\r\n");
      out.write("\t\t\t\t\treturn (ratio*100).toFixed(1) + '%(' + value + '명)';\r\n");
      out.write("\t\t\t\t} \r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("// department_graph();\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h3>사원정보분석</h3>\r\n");
      out.write("<div class=\"w-pct80\" style=\"margin:0 auto\">\r\n");
      out.write("<ul id=\"tabs\">\r\n");
      out.write("\t<li class=\"active\">부서원수</li>\r\n");
      out.write("\t<li>채용인원수</li>\r\n");
      out.write("</ul>\r\n");
      out.write("\r\n");
      out.write("<div id=\"tabContent\">\r\n");
      out.write("\t<div class=\"active\">\r\n");
      out.write("\t\t<div class=\"department\">\r\n");
      out.write("\t\t\t<div style=\"margin:20px 0\">\r\n");
      out.write("\t\t\t\t<label><input type=\"radio\" name=\"graph\" \r\n");
      out.write("\t\t\t\t\t\t\t\tvalue=\"bar\" checked />막대그래프</label>\r\n");
      out.write("\t\t\t\t<label><input type=\"radio\" name=\"graph\" \r\n");
      out.write("\t\t\t\t\t\t\t\tvalue=\"donut\" />도넛그래프</label>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div class=\"chart\"></div>\r\n");
      out.write("\t\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "./legend.jsp", out, false);
      out.write("\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div>\r\n");
      out.write("\t\t<div class=\"hirement\">\r\n");
      out.write("\t\t\t<div style=\"margin:20px 0\">\r\n");
      out.write("\t\t\t\t<label style='margin-right:40px'><input type='checkbox' id='top3' />TOP3 부서</label>\r\n");
      out.write("\t\t\t\t<label><input type='radio' name='unit' \r\n");
      out.write("\t\t\t\t\t\t\tvalue='year' checked />년도별</label>\r\n");
      out.write("\t\t\t\t<label><input type='radio' name='unit' \r\n");
      out.write("\t\t\t\t\t\t\tvalue='month'  />월별</label>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div class=\"chart\"></div>\r\n");
      out.write("\t\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "./legend.jsp", out, false);
      out.write("\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("<div class=\"loading\"><img src=\"imgs/loading.gif\" /></div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
