PK : 테이블의 레코드를 구분할 수 있는 최소의 컬럼(UNIQUE, NOT NULL)
FK : 다른 테이블의 PK를 참조하는 컬럼. 
PK는 부 FK는 자식, 부모와 자식관계로 볼 수 있습니다.

PK는 주로 학번, 주민번호, 사원번호 등 유일한 값을 가지는 컬럼이 주로 PK 의 대상이 됩니다.

예)
학생 테이블 
학번(PK)    이름     주소        학과번호(FK)
1111       홍길동   옛날옛날         a11
1112       강감찬   먼옛날           a11
1113       대장군   전장터           a12
1114       김철수   뒷동네           a12

학과 테이블
학과번호(PK) 학과명
a11          수학과
a12          영문과

위와 같이 두개의 테이블이 있습니다.  
학생 테이블에서 학생 개개인을 유일하게 구분할 수 있는 컬럼으로 학번이 적절하기에 PK가 되며 
학과번호 컬럼은 중복이 되기에 구분이 가능한 키가 아니지만

학과 테이블의 학과번호(PK)와 연결될 수 있기에 FK가 됩니다. 
이러한 관계를 통해 두 테이블은 조합하여 데이터를 추출할 수 있게 됩니다.  

예를 들어 학생 테이블의 모든 학생의  학번, 이름, 학과명을 출력하고자 하면

SELECT 학번, 이름, 주소, 학생테이블.학과번호, 학과테이블.학과명
FROM 학생테이블, 학과테이블
WHERE 학생테이블.학과번호 = 학과테이블.학과번호 ;

라고 조인을 걸어서 해결할 수 있습니다. 이렇게 PK 와 FK 를 나누게 된 이유는 
데이터의 중복을 최소화 하기 위한 정규화에 의해 테이블이 나뉘어졌기 때문입니다. 

예를 들어 학생, 학과 테이블로 나눠지지 않고 처음부터 합쳐져 있었다면

합쳐진 테이블

학번    이름       주소      학과번호     학과명
1111    홍길동     옛날옛날     a11       수학과
1112    강감찬     먼옛날       a11       수학과
1113    대장군     전장터       a12       영문과
1114    김철수     뒷동네       a12       영문과

으로 되있겠으나 학과명이 중복됩니다. 
현재 예제는 컬럼의 양이 적어서 크게 느껴지지 않겠지만
컬럼이 10개 20개 30개만 되도 엄청난 데이터의 낭비가 발생함을 알 수 있습니다. 
이렇게 중복되는 데이터를 최소화 하고자 정규화가 생겨났습니다.

결론 - PK와 FK는 관계형 데이터베이스 RDBMS 에서 반드시 필요하다.

PK는 데이터를 구분할 수 있는 컬럼이며 
FK는 PK와 대응되거나 NULL 값을 갖는다.












